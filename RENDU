           Mini-projet 2 : Synthèse d'invariant en SMT-LIB
                            fichier RENDU
                     (à remplir obligatoirement)

**Un mini-projet sans fichier RENDU rempli ne recevra pas de note.**

Date limite: 19 décembre 2022

Identité
--------
Nombre de binôme: 6
Nom, prénom 1: IM Hyejong
Nom, prénom 2: EDIKEU Yann


Questions sur votre code
------------------------

** Exercice 2 **

0. Avez-vous testé que `make invariants` s'exécute sans erreurs ou
   warnings, puis que `./invariants` produit une sortie au format
   SMT-LIB, et enfin que cette sortie est acceptée par Z3 ?

   -- Aucun problème de compilation, et le fichier invariants produit bien
   un fichier au format SMT-LIB qui est acceptée par Z3 --

---

1. Le type `term` est un type récursif : quel type de fonction est-il
   naturel d'utiliser ? Quels sont vos cas de base et quelle quantité
   strictement décroissante au cours des appels successifs vous assure
   la terminaison ?
   
   -- Pour un type récursif, il est naturel d'utiliser des fonctions...
   récursif; les 'attributs' Const et Var sont nos cas de base étant donné
   que eux ne sont pas constitué du type term; Après 2n appel a notre fonction
   on est assuré de la terminaison, ou n represente un terme qui est soit
   Add ou Mult puisque ils sont eux meme composer de deux termes. --

---

2. Pour l'implémentation de `str_condition`, quelles sont les
   fonctions auxiliaires que vous avez utilisées et/ou écrites ? (Par
   une fonction auxiliaire, on entend ici soit une fonction d'une
   bibliothèque, par exemple des fonctions comme `List.length` ou
   `List.rev_append`, ou une fonction `aux_str_condition` que vous
   avez écrite vous-mêmes.) Expliquez en quelques phrases en français
   comment ces fonctions auxiliaires sont utilisées dans votre
   implémentation de la fonction `str_condition`.
   
   -- Nous avons utiliser une fonction auxiliaire que nous avons nommer aux, qui va 
   tout simplement ce charger de d'appliquer la fonction str_of_term sur chaque terme
   de notre liste. Elle prend en paramètre la liste de terme l de départ et un string contenant
   "Inv " (le début de notre String final) que l'on nomme  ici acc, 
   puis ensuite tant que notre tableau n'est pas vide on applique str_of_term sur le i-ème
   terme de l.Et pour finir lorsque notre liste est enfin vide, on ferme la parenthèse 
   final de notre string. --

---

3. Pour l'implémentation de `str_assert_forall`, quelles sont les
   fonctions auxiliaires que vous avez utilisées et/ou écrites ?
   Expliquez en quelques phrases en français comment ces fonctions
   auxiliaires sont utilisées dans votre implémentation de la fonction
   `str_assert_forall`.
   
   -- Nous avons écrit deux fonctions auxiliaires qui sont 'imbriquer'. La 1ère
   c'est make_x qui permet l'affichage de xn Int sur toutes les variables comprise 
   dans s en appliquant la fonction x déjà écrite; a l'aide de la fonction recursive
   boucle qui va ce charger de d'ajouter dans un accumulateur les applications 
   de la fonction x, en veillant au bon formatage de notre String. Et on fini
   par afficher l'ensemble dans une string final a l'aide de la fonction str_assert --
   
---

4. Le langage de programmation WA suppose que les mises à jour des
   variables `x1`, ..., `xk` sont simultanées : par exemple, si `x1`
   vaut `1` et x2 vaut `1`, exécuter

   x1 = x2 + 1;
   x2 = x1 + 1;

   résulte en `x1` valant `2` et `x2` valant `2`. En Java, les mises à
   jour sont séquentielles et le résultat serait que `x1` vaudrait `2`
   et `x2` vaudrait `3`. Expliquez en français comment modifier le
   code pour construite un programme SMT-LIB plus proche de la façon
   dont les variables sont mises à jour en Java.

   -- Il faudrait simplement ne pas appliquer les Add du mods du type programme
   en meme temps, pour au contraire retrouver cette mise a jour séquentielle des 
   variables comme en JAVA. --

---
5. Avez-vous d'autres remarques sur votre rendu ? (question optionnelle)

   -- XXX --


